// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Catering {
  id      Int    @id @default(autoincrement())
  name    String
  location  String
  members  Memebr[]
  reviews Review[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("caterings")
}

model Review {
  id    Int  @id  @default(autoincrement())
  rating    Int
  comment   String?
  memberId  Int
  cateringId    Int

  catering  Catering @relation(fields: [cateringId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@map("reviews")
}

model Mass {
  id      Int  @id @default(autoincrement())
  name    String
  managerId   Int @unique

  members   Memebr[] @relation("mass-member")
  manager     Memebr @relation(name: "mass-manager", fields: [managerId], references: [id])
  meals Meal[]
  shoppings Shopping[]
  requirements Requirement[]
  
  createdAt  DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("masses")
}

model MealRequest {
  id    Int @id @default(autoincrement())
  memberId    String
  catringId   String
  status     MealStatus
  type      MealType
  remark    String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime @updatedAt

  @@map("requests")
}

model Memebr {
  id    Int @id @default(autoincrement())
  name  String
  email String @unique
  password  String
  massId    Int?
  cateringId  Int?

  role   USERROLE[]  @default([MEMBER])
  meals  Meal[]
  shoppings Shopping[]
  joinedMass    Mass? @relation("mass-member", fields: [massId], references: [id])
  managedMass Mass?  @relation("mass-manager")
  catering    Catering[]
  requirements Requirement[]

  createdAt  DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("mass_members")

}

model Meal {
  id    Int @id @default(autoincrement())
  date   DateTime @default(now())
  quantity  Int
  type    MealType
  memberId    Int
  massId      Int
  member      Memebr @relation(fields: [memberId], references: [id])
  mass         Mass       @relation(fields: [massId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("meals")
}


model Requirement {
  id    Int @id @default(autoincrement())
  massId    Int
  memberId  Int
  text      String

  status    RequirementStatus @default(PENDING)

  member  Memebr @relation(fields: [memberId], references: [id])
  mass  Mass  @relation(fields: [massId], references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("requirements")
}

model Notice {
  id      Int  @id  @default( autoincrement())
  text    String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("notices")
}

model Shopping {
  id    Int   @id @default(autoincrement())
  ingredients     String[]
  price   Decimal
  memberId    Int 
  massId      Int

  member  Memebr  @relation(fields: [memberId], references: [id])
  mass    Mass        @relation(fields: [massId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("shoppings")
}


enum USERROLE {
  MEMBER
  MANAGER
  SUPERADMIN
}

enum MealStatus {
  ACCEPTED
  DECLINED
}

enum RequirementStatus {
  RESOLVED
  PENDING
}

enum MealType {
  BREAKFAST
  LAUNCH
  DINNER
}